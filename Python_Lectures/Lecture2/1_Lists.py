#      Шпоргалка:
# Метод:	     Что делает:
# a.append(x)	 Добавляет элемент x в конец списка a. Если x — список, то он появится в a как вложенный
# a.extend(b)	 Добавляет в конец a все элементы списка b
# a.insert(i, x) Вставляет элемент x на позицию i
# a.remove(x)	 Удаляет в a первый элемент, значение которого равно x
# a.clear()	     Удаляет все элементы из списка a и делает его пустым
# a.index(x)	 Возвращает индекс элемента списка
# a.pop(i)	     Удаляет элемент по индексу и возвращает его, pop() - удаляет последний элемент и возв-т
# a.count(x)	 Считает, сколько раз элемент повторяется в списке
# a.sort()	     Сортирует список. Чтобы отсортировать элементы в обратном порядке, нужно установить дополнительный аргумент reverse = True
# a.reverse()	 Возвращает обратный итератор списка a
# a.copy()	     Создаёт поверхностную копию списка. Для создания глубокой копии используйте метод deepcopy из модуля copy
# 4 - ФУНКЦИИ: len(), sorted(), min(), max().

# Что такое списки?

# Список (list) — это упорядоченный набор элементов, каждый из которых имеет свой номер, или индекс,
# позволяющий быстро получить к нему доступ. Нумерация элементов в списке начинается с 0.

# Как создать список в Python?

# Чтобы создать объект list, в Python используют квадратные скобки — []. 
# Внутри них перечисляют элементы через запятую:
a = [1, 2, 3]
print(a)  # [1, 2, 3]

# В примере ниже объект b хранит: строку — cat, число — 123 и булево значение — True: 
b = ['cat', 123, True]
print(b)  # ['cat', 123, True]

# Также в Python можно создавать вложенные списки:
c = [1, 2, [3, 4]]
print(c)  # [1, 2, [3, 4]]

# Операции со списками.

# Индексация:

# Доступ к элементам списка получают по индексам, через квадратные скобки []:
a = [1, 2, 3, 4]
a[0]  # Обратится к 1
a[2]  # Обратится к 3
a[3]  # Обратится к 4
# a[4]  # Выведет ошибку
print(a[1])  # 2

# Кроме того, Python поддерживает обращение к нескольким элементам сразу — через интервал.
a = [1, 2, 3, 4]
a[0:2]
print(a[0:2])  # [1, 2] # срез списка от 0 до 2, не включая 2.
# Двоеточие позволяет получить срез списка.
# Полная форма оператора выглядит так: начальный_индекс:конечный_индекс:шаг.
# Здесь мы указываем, с какого индекса начинается «срез», на каком заканчивается и с каким шагом берутся элементы — по умолчанию 1.

# Усложним пример:
a = [1, 2, 3, 4, 5]
a[1:6:2]
print(a[1:6:2])  # [2, 4]
# Здесь мы шли по элементам с шагом 2. Начали с индекса 1 — это первое число внутри скобок, а
# закончили на индексе 6, не включая его.
# Двигались с шагом 2, то есть через один элемент, и получили [2, 4].

# Изменение элементов.

# Списки — это динамическая структура данных. А значит, мы можем менять их уже после создания.
# Например, можно заменить один элемент на другой:
a = [1, 2, 3]
a[1] = 4
print(a)  # [1, 4, 3]

# Но нужно быть осторожными, потому что может случиться такое:
a = [1, 2]
b = a
a[0] = 5
print(a)  # [5, 2]
print(b)  # [5, 2]

# Объединение списков.

# Иногда полезно объединить два списка. Чтобы это сделать, используют оператор +:
a = [1, 2]
b = [3, 4]
с = a + b
# c = [1, 2] + [3, 4]
print(c)  # [1, 2, 3, 4]

# Разложение списка.

# Элементы списка можно присвоить отдельным переменным:
a = [1, 2, 3]
d1, d2, d3 = a
print(d1)  # 1
print(d2)  # 2
print(d3)  # 3
# Здесь из списка a поочерёдно достаются элементы, начиная с индекса 0, и присваиваются переменным.
# И в отличие от присвоения одного списка другому, в этом случае Python создаст три отдельных целых числа, которые никак не будут связаны с элементами списка, и присвоит их трём переменным.
# Поэтому, если мы изменим, например, переменную d2, со списком a ничего не случится.

# Перебор элементов.

# Мы можем перебирать элементы списка с помощью циклов for и while.
# Так выглядит перебор через for:
animals = ['cat', 'dog', 'bat']
for animal in animals:
    print(animal)  # cat
                   # dog
                   # bat
# Здесь мы перебираем каждый элемент списка и выводим их с помощью функции print().

# А вот так выглядит перебор через цикл while:
animals = ['cat', 'dog', 'bat']
i = 0
while i < len(animals):
    print(animals[i])
    i += 1
# cat
# dog
# bat
# Этот перебор чуть сложнее, потому что мы используем дополнительную переменную i, чтобы обращаться к элементам списка.
# Также мы использовали встроенную функцию len(), чтобы узнать размер нашего списка.
# А ещё в условии цикла while мы указали знак «меньше» (<), потому что индексация элементов идёт до значения количество элементов списка — 1.

# Сравнение списков.

# Python поддерживает сравнение списков. Два списка считаются равными, если они содержат одинаковые элементы.
# Функция возвращает булево значение — True или False:
a = [1, 2, 3]
b = [1, 2, 3]
print(a == b)  # True
# Получили, что списки равны.

# В некоторых языках равенство ещё проверяется и по тому, ссылаются ли переменные на один и тот же объект. Обычно это делается через оператор === .
# В Python это можно сделать через оператор is, который проверяет, имеют ли две переменные один и тот же адрес в памяти:
a = [1, 2, 3]
b = a
print(a is b)  # True
# Получили, что две переменные ссылаются на один и тот же адрес в памяти.

# Встроенные ФУНКЦИИ для списков Python.

# В Python есть 4 функции, которые позволяют узнавать длину списка, сортировать его и возвращать максимальное и минимальное значение.

# Функция len()

# Возвращает длину списка:
a = [5, 3, 1]
len(a)
print(len(a))  # 3

# Функция sorted() - в переводе отсортированный.

# Возвращает отсортированный список:
a = [8, 1, 3, 2]
sorted(a)
print(sorted(a))  # [1, 2, 3, 8]

# Функция min() и max()

# Возвращают наименьший и наибольший элемент списка:
a = [1, 9, -2, 3]
min(a)
max(a)
print(min(a))  # -2
print(max(a))  # 9

# МЕТОДЫ СПИСКОВ Python.

# Чтобы проще управлять элементами списка, в стандартной библиотеке Python есть набор популярных методов для списков.
# Разберём основные из них.

# Метод append() - с анг добавить

# Добавляет новый элемент в конец списка:
a = [1, 2, 3]
a.append(4)
print(a)  # [1, 2, 3, 4]

# Метод extend() - c анг - расширять, продлевать

# Добавляет набор элементов в конец списка:
a = [1, 2, 3]
a.extend([4, 5])
print(a)  # [1, 2, 3, 4, 5]
# Внутрь метода extend() нужно передать итерируемый объект — например, другой list или строку.

# Вот так метод extend() добавит строку:
a = ['cat', 'dog', 'bat']
a.extend('mouse')
print(a)  # ['cat', 'dog', 'bat', 'm', 'o', 'u', 's', 'e']
# Заметьте, что строка добавилась посимвольно.

b = ['cat', 'dog', 'bat']
b.extend(['mouse'])  # ['cat', 'dog', 'bat', 'mouse']
print(b)  # ['cat', 'dog', 'bat', 'mouse']
# Заметьте, что список со строкой добавился не посимвольно.

# Метод insert() - вставлять

# Добавляет новый элемент по ИНДЕКСУ:
a = [1, 2, 3]
a.insert(0, 4)
print(a)  # [4, 1, 2, 3]
# Сначала мы передаём индекс, по которому хотим вставить новый элемент, а затем сам элемент.
# Остальные эленты смещаются вправо.

# Метод remove() - удалять

# Удаляет элемент из списка:
a = [1, 2, 3, 1]
a.remove(1)
print(a)  # [2, 3, 1]
# Метод удаляет только первое вхождение элемента. Остальные остаются нетронутыми.

# Если элемента нет в списке, Python вернёт ошибку и программа прервётся:
a = [1, 2, 3, 1]
# a.remove(5)
# print(a) => Ошибка говорит, что элемента нет в списке.
# Traceback (most recent call last):
# File "<stdin>", line 1, in < module >
# ValueError: list.remove(x): x not in list

# Метод clear() - прозрачный)

# Удаляет все элементы из списка и делает его пустым:
a = [1, 2, 3]
a.clear()
print(a)  # []

# Метод index() - индекс

# Возвращает индекс элемента списка в Python:
a = [1, 2, 3]
print(a.index(2))  # 1

# Если элемента нет в списке, выведется ошибка:
a = [1, 2, 3]
# print(a.index(4))
# Traceback (most recent call last):
#   File "<stdin>", line 1, in < module >
# ValueError: 4 is not in list

# Метод pop() - хлопнуть

# Удаляет элемент по индексу и возвращает его как результат:
a = [1, 2, 3]
print(a.pop())  # 3
print(a)  # [1, 2]
# Мы не передали индекс в метод, поэтому он удалил последний элемент списка.

# Если передать индекс, то получится так:
a = [1, 2, 3]
print(a.pop(1))  # 2
print(a)  # [1, 3]

# Метод count() - считать

# Считает, сколько раз элемент повторяется в списке:
a = [1, 1, 1, 2]
print(a.count(1))  # 3

# Метод sort() - сортировать

# Сортирует список:
a = [4, 1, 5, 2]
a.sort()  # [1, 2, 4, 5]

# Если нам нужно отсортировать в обратном порядке — от большего к меньшему,— в методе есть дополнительный параметр reverse - с анг обеспечить обратный регресс:
a = [4, 1, 5, 2]
a.sort(reverse=True)
print(a)  # [5, 4, 2, 1]

# Метод reverse() - с анг обеспечить обратный регресс

# Переставляет элементы в обратном порядке:
a = [1, 3, 2, 4]
a.reverse()
print(a)  # [4, 2, 3, 1]

# Метод copy() - копировать

# Копирует список:
a = [1, 2, 3]
b = a.copy()
print(b)  # [1, 2, 3]
